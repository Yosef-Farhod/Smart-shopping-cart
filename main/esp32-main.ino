#include <WiFi.h>
#include <WebServer.h>

const char *ssid = "Yosef";
const char *password = "28072004";

WebServer server(80);

// ูุชุบูุฑุงุช ุนุงูุฉ ูุชุฎุฒูู ุขุฎุฑ ุงูุจูุงูุงุช ุงููุณุชููุฉ
String latestSerial = "";
String latestCount = "";
String latestReading = "";

// ุฃุถู ูุชุบูุฑ ุฌุฏูุฏ ููุญุงูุงุฉ ุงูุฑูู ุงูุชุณูุณูู ุงูููุฑูุก ูู ุงูุงุณูุงูุฑ
String scanned_serial = "123456"; // ุบููุฑ ุงููููุฉ ููุงุฎุชุจุงุฑ

void handleUpdate()
{
    Serial.println("๐ฅ Received request on /update");

    if (server.hasArg("serial"))
    {
        // ุชุญุฏูุซ ุงูููู ูู ุงูุทูุจ
        latestSerial = server.arg("serial");
        latestCount = server.hasArg("count") ? server.arg("count") : "";
        latestReading = server.hasArg("reading") ? server.arg("reading") : "";

        // ุนุฑุถ ุงูุจูุงูุงุช ุนูู ุงูู Serial Monitor
        Serial.println("โ ุชู ุงุณุชูุงู ุงูุจูุงูุงุช:");
        Serial.println("Serial: " + latestSerial);
        Serial.println("Count: " + latestCount);
        Serial.println("Reading: " + latestReading);

        // ููุงุฑูุฉ ุงูุฑูู ุงูุชุณูุณูู ุงูููุฑูุก ูุน ุงูุฑูู ุงููุณุชูู
        if (scanned_serial == latestSerial)
        {
            Serial.println("๐ ุชู ุนูู ุงุณูุงู ููููุชุฌ ุจูุฌุงุญ (Serial Match)");
            // ููููู ููุง ุชูููุฐ ุฃู ููุทู ุฅุถุงูู ุนูุฏ ุงููุทุงุจูุฉ
        }

        server.send(200, "text/plain", "Data received");
    }
    else
    {
        Serial.println("โ Missing serial in request");
        server.send(400, "text/plain", "Missing serial");
    }
}

// ุฏุงูุฉ ุงุฎุชุจุงุฑ (ุงุฎุชูุงุฑู)
void handleRoot()
{
    server.send(200, "text/plain", "ESP32 Receiver is running");
}

void setup()
{
    Serial.begin(115200);

    // ุงูุงุชุตุงู ุจุงููุงู ูุงู
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nโ Connected to WiFi");
    Serial.print("๐ ESP32 IP Address: ");
    Serial.println(WiFi.localIP());

    // ุฑุจุท ุงููุณุงุฑุงุช
    server.on("/", handleRoot);
    server.on("/update", handleUpdate);
    server.begin();
    Serial.println("๐ Server started");
}

void loop()
{
    server.handleClient();
}

// ุงูููุฏ ุงูุญุงูู ููุณูุฉ (ESP32) ุจุงููุนู ูุณุชูุจู ูู ุงูุจูุงูุงุช ููุฑุงูุจ ุงูุฑูู ุงูุชุณูุณูู ููุทุงุจูู ูุน ุงููุชุบูุฑ scanned_serial.
// ูุง ุชุญุชุงุฌ ูุชุนุฏูู ุฅุถุงูู ุฅุฐุง ููุช ุชุฑูุฏ ููุท ุงุณุชูุจุงู ุงูุจูุงูุงุช ูู ุงูุฑู (ESP8266) ูุงูุชุญูู ูู ุงูุฑูู ุงูุชุณูุณูู.
// ุฅุฐุง ุฃุฑุฏุช ุฅุถุงูุฉ ููุทู ุฅุถุงูู ุนูุฏ ุงููุทุงุจูุฉ ุฃู ุฅุฑุณุงู ุฑุฏุ ููููู ุฐูู ููุง.
// ุงูููุฏ ุงูุญุงูู ููุณูุฉ (ESP32) ุจุงููุนู ูุณุชูุจู ูู ุงูุจูุงูุงุช ููุฑุงูุจ ุงูุฑูู ุงูุชุณูุณูู ููุทุงุจูู ูุน ุงููุชุบูุฑ scanned_serial.
// ูุง ุชุญุชุงุฌ ูุชุนุฏูู ุฅุถุงูู ุฅุฐุง ููุช ุชุฑูุฏ ููุท ุงุณุชูุจุงู ุงูุจูุงูุงุช ูู ุงูุฑู (ESP8266) ูุงูุชุญูู ูู ุงูุฑูู ุงูุชุณูุณูู.
// ุฅุฐุง ุฃุฑุฏุช ุฅุถุงูุฉ ููุทู ุฅุถุงูู ุนูุฏ ุงููุทุงุจูุฉ ุฃู ุฅุฑุณุงู ุฑุฏุ ููููู ุฐูู ููุง.
// ุงูููุฏ ุงูุญุงูู ููุณูุฉ (ESP32) ุจุงููุนู ูุณุชูุจู ูู ุงูุจูุงูุงุช ููุฑุงูุจ ุงูุฑูู ุงูุชุณูุณูู ููุทุงุจูู ูุน ุงููุชุบูุฑ scanned_serial.
// ูุง ุชุญุชุงุฌ ูุชุนุฏูู ุฅุถุงูู ุฅุฐุง ููุช ุชุฑูุฏ ููุท ุงุณุชูุจุงู ุงูุจูุงูุงุช ูู ุงูุฑู (ESP8266) ูุงูุชุญูู ูู ุงูุฑูู ุงูุชุณูุณูู.
// ุฅุฐุง ุฃุฑุฏุช ุฅุถุงูุฉ ููุทู ุฅุถุงูู ุนูุฏ ุงููุทุงุจูุฉ ุฃู ุฅุฑุณุงู ุฑุฏุ ููููู ุฐูู ููุง.
